# 读
type Reader interface {
    func Read(p []byte) (n int, err error)
}
Reader is the interface that wraps the basic Read method

Read reads up to len(p) bytes into p
It returns the number of bytes read (0<=n<=len(p)) and any error encounterd.

# 不能假设[n, len(p))之间的数据没有被更改
Even if Read returns n < len(p), it may use all of p as scratch space(临时空间) during the call.

# 即使正确返回的情况下，并不一定返回len(p)个字节. 但是这说明不了Read是阻塞还是非阻塞式
If some data is available but not len(p) bytes, Read conventionally returns what is available instead of waiting for more.

# 遇到错误的情况下，错误也有可能是在下一次调用后返回
When Read encounters an error or end-of-file condition after successfully reading n > 0 bytes, it returns the number of bytes read.
It may return the non-nil error from the same call or return the error (and n==0) from a subsequent call.
An instance of this general case is that a Reader returning a non-zero number of bytes at the end of the input stream may return 
err == EOR or err == nil. The next Read should return 0, EOF.

# 失败的情况下也要检查n的值，n>0就表示正确读取了这些数据
Caller should always process the n > 0 bytes returned brfore considering the error err.

Implementations of Read are discouraged from returning n=0 and err=nil except when len(p)=0
Caller should treat a return of 0 and nil as indicating that nothing happened. NOTE: It does not indicate EOF


# 写
type Writer interface {
    func Write(p []byte) (n int, err error)
}

Writer is the interface that wrpas the basic Write method

Write writes len(p) bytes from p to the underlying data stream. It returns the number of bytes written from p (0<=n<=len(p)) and any error encountered
that cased the write to stop early.
Write must return a non-nil error if it returns n < len(p)
Write must not modify the slice data

